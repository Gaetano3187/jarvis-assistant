diff --git a/.env.example b/.env.example
index ca3b1908b5960596fc67a5957de0bf75acb33dfa..66828690f4327806a7dbb6e63c9a6b00d324218a 100644
--- a/.env.example
+++ b/.env.example
@@ -1,6 +1,4 @@
-NEXT_PUBLIC_SUPABASE_URL=https://urbmrnkcxqryceberito.supabase.co
-NEXT_PUBLIC_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVyYm1ybmtjeHFyeWNlYmVyaXRvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTAxODgyMjEsImV4cCI6MjA2NTc2NDIyMX0.Lo-pY8IwEQaoD8wH1ypcugc6j7Ee3drq3jSJ3dt374M
-SUPABASE_SERVICE_ROLE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVyYm1ybmtjeHFyeWNlYmVyaXRvIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MDE4ODIyMSwiZXhwIjoyMDY1NzY0MjIxfQ.uI1R1X3YPHNIlPyqPW6TUb3oVNayIzzWQE-2y_zXWIA
-DATABASE_URL=postgresql://postgres:aYfO7KTucmYhkOH9@db.urbmrnkcxqryceberito.supabase.co:5432/postgres
-NEXTAUTH_SECRET=8Yp1n+2yQ3Xt6gBqBIb0nC+e6x7kZp0R
-NEXTAUTH_URL=http://localhost:3000
+NEXT_PUBLIC_SUPABASE_URL=
+NEXT_PUBLIC_SUPABASE_ANON=
+OPENAI_API_KEY=
+CORS_ORIGIN=
diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000000000000000000000000000000000000..6426de4de97fff36a0e849a4916ac65edb64e9b3
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,7 @@
+node_modules/
+.next/
+.env
+.env.local
+.vercel/
+.DS_Store
+*.log
diff --git a/README.md b/README.md
new file mode 100644
index 0000000000000000000000000000000000000000..5051655878d3fffa3b39e10b4028771ff471de6d
--- /dev/null
+++ b/README.md
@@ -0,0 +1,56 @@
+# Jarvis Assistant
+
+App per gestione spese, liste della spesa, prodotti in scadenza.
+Realizzata con Next.js, Supabase, Tailwind, OpenAI e Recharts.
+
+## üß© Tecnologie principali
+
+- **Next.js 14**
+- **React 18**
+- **TailwindCSS**
+- **Supabase Auth & DB**
+- **OpenAI GPT-4 (categorizzazione)**
+- **Recharts**
+- **riconoscimento vocale react-speech-recognition**
+
+## üöÄ Istruzioni di avvio
+
+Clona il progetto:
+
+```bash
+git clone https://github.com/Gaetano3187/jarvis-assistant.git
+cd jarvis-assistant
+```
+
+Installa le dipendenze:
+
+```bash
+npm install
+```
+
+Crea il file `.env.local` copiando da `.env.example`.
+
+Variabili richieste:
+
+```ini
+NEXT_PUBLIC_SUPABASE_URL=https://urbmrnkcxqryceberito.supabase.co
+NEXT_PUBLIC_SUPABASE_ANON=... (anon key Supabase)
+OPENAI_API_KEY=... (tua API key OpenAI)
+CORS_ORIGIN=http://localhost:3000,https://jarvis-assistant.vercel.app
+```
+
+Avvia l'app:
+
+```bash
+npm run dev
+```
+
+Oppure deploya su Vercel:
+
+```bash
+vercel --prod
+```
+
+## üåê App online
+
+https://jarvis-assistant.vercel.app
diff --git a/components/Navbar.tsx b/components/Navbar.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..e78e4f9f4e4ae13f1d112d785e94da777257f96a
--- /dev/null
+++ b/components/Navbar.tsx
@@ -0,0 +1,41 @@
+import Link from 'next/link';
+import { useRouter } from 'next/router';
+import { supabase } from '../utils/supabaseClient';
+import { useTheme } from './ThemeProvider';
+
+interface NavbarProps {
+  userEmail: string;
+}
+
+export default function Navbar({ userEmail }: NavbarProps) {
+  const router = useRouter();
+  const { theme, toggleTheme } = useTheme();
+
+  const handleLogout = async () => {
+    await supabase.auth.signOut();
+    router.push('/');
+  };
+
+  return (
+    <nav className="flex items-center justify-between bg-white dark:bg-gray-800 px-4 py-2 shadow">
+      <Link href="/" className="text-lg font-bold">
+        Jarvis Assistant
+      </Link>
+      <div className="flex items-center space-x-4">
+        <span className="text-sm text-gray-700 dark:text-gray-200">{userEmail}</span>
+        <button
+          onClick={toggleTheme}
+          className="px-3 py-1 bg-gray-200 dark:bg-gray-700 rounded"
+        >
+          {theme === 'dark' ? '‚òÄÔ∏è' : 'üåô'}
+        </button>
+        <button
+          onClick={handleLogout}
+          className="bg-red-500 text-white px-3 py-1 rounded hover:bg-red-600"
+        >
+          Logout
+        </button>
+      </div>
+    </nav>
+  );
+}
diff --git a/components/ThemeProvider.tsx b/components/ThemeProvider.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..cfa32c12095c431d2f1a147a00b822f830490f8a
--- /dev/null
+++ b/components/ThemeProvider.tsx
@@ -0,0 +1,43 @@
+import { createContext, useContext, useEffect, useState, ReactNode } from 'react';
+
+interface ThemeContextValue {
+  theme: 'light' | 'dark';
+  toggleTheme: () => void;
+}
+
+const ThemeContext = createContext<ThemeContextValue>({
+  theme: 'light',
+  toggleTheme: () => {},
+});
+
+export const useTheme = () => useContext(ThemeContext);
+
+export default function ThemeProvider({ children }: { children: ReactNode }) {
+  const [theme, setTheme] = useState<'light' | 'dark'>('light');
+
+  useEffect(() => {
+    const stored = localStorage.getItem('theme');
+    if (stored === 'dark') {
+      setTheme('dark');
+    }
+  }, []);
+
+  useEffect(() => {
+    if (theme === 'dark') {
+      document.documentElement.classList.add('dark');
+    } else {
+      document.documentElement.classList.remove('dark');
+    }
+    localStorage.setItem('theme', theme);
+  }, [theme]);
+
+  const toggleTheme = () => {
+    setTheme((prev) => (prev === 'dark' ? 'light' : 'dark'));
+  };
+
+  return (
+    <ThemeContext.Provider value={{ theme, toggleTheme }}>
+      {children}
+    </ThemeContext.Provider>
+  );
+}
diff --git a/next.config.js b/next.config.js
index 658404ac690c0c5da477e6ae09f2303ccf615b1e..91ef62f0db592e919ce8f1cb31148f185bc4611e 100644
--- a/next.config.js
+++ b/next.config.js
@@ -1,4 +1,6 @@
 /** @type {import('next').NextConfig} */
-const nextConfig = {};
+const nextConfig = {
+  reactStrictMode: true,
+};
 
 module.exports = nextConfig;
diff --git a/package.json b/package.json
index b3a00e0ef47e6b070151d56ed944e95a48f68f44..8546f505b71b6366cf348d4ec5c8ff4813cbd088 100644
--- a/package.json
+++ b/package.json
@@ -1,34 +1,28 @@
 {
-  "name": "jarvis-assistant",
+  "name": "next-supabase-openai",
   "version": "0.1.0",
   "private": true,
   "scripts": {
     "dev": "next dev",
     "build": "next build",
     "start": "next start"
   },
   "dependencies": {
     "next": "14.1.0",
     "react": "18.2.0",
     "react-dom": "18.2.0",
-    "next-auth": "5.0.0-beta.10",
-    "prisma": "^5.14.0",
-    "@prisma/client": "^5.14.0",
-    "zod": "^3.23.0",
-    "tesseract.js": "^5.0.3",
-    "react-chartjs-2": "^5.2.0",
-    "chart.js": "^4.4.0"
-  },
-  "devDependencies": {
-    "typescript": "^5.4.0",
-    "@types/react": "18.2.21",
-    "@types/node": "20.10.6",
     "tailwindcss": "^3.4.0",
     "postcss": "^8.4.31",
-    "autoprefixer": "10.4.15"
+    "autoprefixer": "^10.4.15",
+    "@supabase/supabase-js": "^2.39.8",
+    "dotenv": "^16.4.2",
+    "react-speech-recognition": "^4.0.1",
+    "openai": "^4.29.1",
+    "recharts": "^2.6.2"
   },
-  "overrides": {
-    "react": "18.2.0",
-    "react-dom": "18.2.0"
+  "devDependencies": {
+    "typescript": "^5.4.0",
+    "@types/react": "^18.2.21",
+    "@types/node": "^20.10.6"
   }
 }
diff --git a/pages/_app.tsx b/pages/_app.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..eaaa8e886719108882a91f8fd6c97f7820b8a39f
--- /dev/null
+++ b/pages/_app.tsx
@@ -0,0 +1,11 @@
+import type { AppProps } from 'next/app';
+import '../styles/globals.css';
+import ThemeProvider from '../components/ThemeProvider';
+
+export default function MyApp({ Component, pageProps }: AppProps) {
+  return (
+    <ThemeProvider>
+      <Component {...pageProps} />
+    </ThemeProvider>
+  );
+}
diff --git a/pages/dashboard.tsx b/pages/dashboard.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..47cb14c15d4b22500deb54ab6269d21abbca261b
--- /dev/null
+++ b/pages/dashboard.tsx
@@ -0,0 +1,198 @@
+import { useEffect, useState } from 'react';
+import { useRouter } from 'next/router';
+import {
+  BarChart,
+  Bar,
+  XAxis,
+  YAxis,
+  Tooltip,
+  ResponsiveContainer,
+  LineChart,
+  Line,
+  PieChart,
+  Pie,
+  Cell,
+  Legend,
+} from 'recharts';
+import Navbar from '../components/Navbar';
+import { supabase } from '../utils/supabaseClient';
+import { calcolaScorte } from '../utils/scorte';
+
+interface CategoryTotals {
+  casa: number;
+  vestiti: number;
+  divertimento: number;
+  varie: number;
+  [key: string]: number;
+}
+
+const COLORS = ['#8884d8', '#82ca9d', '#ffc658', '#ff8042', '#8dd1e1', '#a4de6c'];
+
+export default function DashboardPage() {
+  const router = useRouter();
+  const [userEmail, setUserEmail] = useState<string | null>(null);
+  const [userId, setUserId] = useState<string | null>(null);
+  const [loading, setLoading] = useState(true);
+
+  const [monthlyTotal, setMonthlyTotal] = useState(0);
+  const [catTotals, setCatTotals] = useState<CategoryTotals>({
+    casa: 0,
+    vestiti: 0,
+    divertimento: 0,
+    varie: 0,
+  });
+  const [dailyData, setDailyData] = useState<{ day: string; total: number }[]>([]);
+  const [stockData, setStockData] = useState<{ name: string; value: number }[]>([]);
+
+  useEffect(() => {
+    const checkUser = async () => {
+      const {
+        data: { session },
+      } = await supabase.auth.getSession();
+      if (!session?.user) {
+        router.replace('/');
+      } else {
+        setUserEmail(session.user.email);
+        setUserId(session.user.id);
+        loadData(session.user.id);
+      }
+      setLoading(false);
+    };
+
+    checkUser();
+
+    const {
+      data: { subscription },
+    } = supabase.auth.onAuthStateChange((_event, session) => {
+      if (!session?.user) {
+        router.replace('/');
+      } else {
+        setUserEmail(session.user.email);
+        setUserId(session.user.id);
+        loadData(session.user.id);
+      }
+    });
+    return () => {
+      subscription.unsubscribe();
+    };
+  }, [router]);
+
+  const loadData = async (uid: string) => {
+    const start = new Date();
+    start.setDate(1);
+    start.setHours(0, 0, 0, 0);
+    const { data: spese } = await supabase
+      .from('spese')
+      .select('categoria,importo,data')
+      .eq('user_id', uid)
+      .gte('data', start.toISOString().split('T')[0]);
+
+    if (spese) {
+      let total = 0;
+      const cat: CategoryTotals = { casa: 0, vestiti: 0, divertimento: 0, varie: 0 };
+      const perDay: Record<string, number> = {};
+      (spese as any[]).forEach((s) => {
+        total += s.importo;
+        if (cat[s.categoria] !== undefined) {
+          cat[s.categoria] += s.importo;
+        } else {
+          cat[s.categoria] = (cat[s.categoria] || 0) + s.importo;
+        }
+        const d = new Date(s.data).getDate().toString();
+        perDay[d] = (perDay[d] || 0) + s.importo;
+      });
+      setMonthlyTotal(total);
+      setCatTotals(cat);
+      const dayArr = Object.entries(perDay)
+        .map(([d, v]) => ({ day: d, total: v }))
+        .sort((a, b) => parseInt(a.day) - parseInt(b.day));
+      setDailyData(dayArr);
+    }
+
+    const { data: superList } = await supabase
+      .from('lista_spesa_super')
+      .select('*')
+      .eq('user_id', uid);
+    const { data: onlineList } = await supabase
+      .from('lista_spesa_online')
+      .select('*')
+      .eq('user_id', uid);
+    const combined = [...(superList || []), ...(onlineList || [])];
+    const now = new Date();
+    const scorte = combined
+      .filter((p: any) => p.data_acquisto && p.scadenza && p.quantita)
+      .map((p: any) => {
+        const { consumoStimato } = calcolaScorte(
+          new Date(p.data_acquisto),
+          p.quantita,
+          new Date(p.scadenza),
+          now
+        );
+        return { name: p.prodotto || p.nome, value: consumoStimato };
+      });
+    setStockData(scorte);
+  };
+
+  if (loading || !userEmail) return null;
+
+  const barData = [
+    { name: 'Casa', value: catTotals.casa },
+    { name: 'Vestiti', value: catTotals.vestiti },
+    { name: 'Divertimento', value: catTotals.divertimento },
+    { name: 'Varie', value: catTotals.varie },
+  ];
+
+  return (
+    <div className="min-h-screen bg-gray-100 dark:bg-gray-900">
+      <Navbar userEmail={userEmail} />
+      <main className="p-4 max-w-4xl mx-auto space-y-6">
+        <div className="bg-white dark:bg-gray-800 p-4 rounded shadow">
+          <h2 className="text-xl font-bold mb-2 dark:text-white">Riepilogo mese corrente</h2>
+          <p className="mb-2">Totale: {monthlyTotal.toFixed(2)} ‚Ç¨</p>
+          <ul className="grid grid-cols-2 gap-2">
+            <li>Casa: {catTotals.casa.toFixed(2)} ‚Ç¨</li>
+            <li>Vestiti: {catTotals.vestiti.toFixed(2)} ‚Ç¨</li>
+            <li>Divertimento: {catTotals.divertimento.toFixed(2)} ‚Ç¨</li>
+            <li>Varie: {catTotals.varie.toFixed(2)} ‚Ç¨</li>
+          </ul>
+        </div>
+        <div className="bg-white dark:bg-gray-800 p-4 rounded shadow">
+          <h3 className="text-lg font-bold mb-2 dark:text-white">üìä Spese per Categoria</h3>
+          <ResponsiveContainer width="100%" height={300}>
+            <BarChart data={barData}>
+              <XAxis dataKey="name" />
+              <YAxis />
+              <Tooltip />
+              <Bar dataKey="value" fill="#8884d8" />
+            </BarChart>
+          </ResponsiveContainer>
+        </div>
+        <div className="bg-white dark:bg-gray-800 p-4 rounded shadow">
+          <h3 className="text-lg font-bold mb-2 dark:text-white">üìà Spese per Giorno</h3>
+          <ResponsiveContainer width="100%" height={300}>
+            <LineChart data={dailyData}>
+              <XAxis dataKey="day" />
+              <YAxis />
+              <Tooltip />
+              <Line type="monotone" dataKey="total" stroke="#82ca9d" />
+            </LineChart>
+          </ResponsiveContainer>
+        </div>
+        <div className="bg-white dark:bg-gray-800 p-4 rounded shadow">
+          <h3 className="text-lg font-bold mb-2 dark:text-white">üßØ Stato Scorte per Consumo</h3>
+          <ResponsiveContainer width="100%" height={300}>
+            <PieChart>
+              <Pie data={stockData} dataKey="value" nameKey="name" outerRadius={100} label>
+                {stockData.map((_entry, index) => (
+                  <Cell key={index} fill={COLORS[index % COLORS.length]} />
+                ))}
+              </Pie>
+              <Tooltip />
+              <Legend />
+            </PieChart>
+          </ResponsiveContainer>
+        </div>
+      </main>
+    </div>
+  );
+}
diff --git a/pages/finanze.tsx b/pages/finanze.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..4a491a4381bd691aa1b4037c0516d45554ac5061
--- /dev/null
+++ b/pages/finanze.tsx
@@ -0,0 +1,239 @@
+import { useEffect, useState } from 'react';
+import { useRouter } from 'next/router';
+import Navbar from '../components/Navbar';
+import { supabase } from '../utils/supabaseClient';
+import { getCategoria } from '../utils/gptCategorizer';
+
+interface Spesa {
+  id: number;
+  categoria: string;
+  data: string;
+  esercente: string;
+  importo: number;
+}
+
+export default function FinanzePage() {
+  const router = useRouter();
+  const [userEmail, setUserEmail] = useState<string | null>(null);
+  const [userId, setUserId] = useState<string | null>(null);
+  const [loading, setLoading] = useState(true);
+  const [activeCategory, setActiveCategory] = useState<string | null>(null);
+  const [spese, setSpese] = useState<Spesa[]>([]);
+  const [showForm, setShowForm] = useState(false);
+  const [formData, setFormData] = useState({
+    categoria: '',
+    data: '',
+    esercente: '',
+    importo: '',
+  });
+  const [editingId, setEditingId] = useState<number | null>(null);
+
+  useEffect(() => {
+    const checkUser = async () => {
+      const {
+        data: { session },
+      } = await supabase.auth.getSession();
+      if (!session?.user) {
+        router.replace('/');
+      } else {
+        setUserEmail(session.user.email);
+        setUserId(session.user.id);
+      }
+      setLoading(false);
+    };
+
+    checkUser();
+
+    const {
+      data: { subscription },
+    } = supabase.auth.onAuthStateChange((_event, session) => {
+      if (!session?.user) {
+        router.replace('/');
+      } else {
+        setUserEmail(session.user.email);
+        setUserId(session.user.id);
+      }
+    });
+    return () => {
+      subscription.unsubscribe();
+    };
+  }, [router]);
+
+  const categories = [
+    { key: 'casa', label: 'üè† Spese Casa' },
+    { key: 'vestiti', label: 'üëó Vestiti e Accessori' },
+    { key: 'divertimento', label: 'üéâ Divertimento' },
+    { key: 'varie', label: 'üì¶ Varie' },
+  ];
+
+  const fetchSpese = async (categoria: string) => {
+    if (!userId) return;
+    const { data } = await supabase
+      .from('spese')
+      .select('*')
+      .eq('user_id', userId)
+      .eq('categoria', categoria)
+      .order('data', { ascending: false });
+    setSpese((data as Spesa[]) || []);
+  };
+
+  const handleCategoryClick = (cat: string) => {
+    setActiveCategory(cat);
+    fetchSpese(cat);
+  };
+
+  const handleDelete = async (id: number) => {
+    await supabase.from('spese').delete().eq('id', id);
+    if (activeCategory) fetchSpese(activeCategory);
+  };
+
+  const handleEdit = (spesa: Spesa) => {
+    setFormData({
+      categoria: spesa.categoria,
+      data: spesa.data,
+      esercente: spesa.esercente,
+      importo: spesa.importo.toString(),
+    });
+    setEditingId(spesa.id);
+    setShowForm(true);
+  };
+
+  const handleAddClick = () => {
+    setFormData({ categoria: activeCategory || '', data: '', esercente: '', importo: '' });
+    setEditingId(null);
+    setShowForm(true);
+  };
+
+  const handleSubmit = async (e: React.FormEvent) => {
+    e.preventDefault();
+    if (!userId) return;
+    let categoria = formData.categoria;
+    if (!categoria) {
+      categoria = await getCategoria(formData.esercente);
+      const ok = window.confirm(`Salvare nella categoria "${categoria}"?`);
+      if (!ok) return;
+    }
+    const payload = {
+      categoria,
+      data: formData.data,
+      esercente: formData.esercente,
+      importo: parseFloat(formData.importo),
+      user_id: userId,
+    };
+    if (editingId) {
+      await supabase.from('spese').update(payload).eq('id', editingId);
+    } else {
+      await supabase.from('spese').insert(payload);
+    }
+    setShowForm(false);
+    if (activeCategory) fetchSpese(activeCategory);
+  };
+
+  if (loading) return null;
+  if (!userEmail) return null;
+
+  return (
+    <div className="min-h-screen bg-gray-100 dark:bg-gray-900">
+      <Navbar userEmail={userEmail} />
+      <main className="p-4 max-w-3xl mx-auto">
+        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
+          {categories.map((cat) => (
+            <button
+              key={cat.key}
+              onClick={() => handleCategoryClick(cat.key)}
+              className="bg-white dark:bg-gray-800 rounded shadow p-6 text-center text-lg hover:bg-gray-50 dark:hover:bg-gray-700"
+            >
+              {cat.label}
+            </button>
+          ))}
+        </div>
+
+        <button
+          onClick={handleAddClick}
+          className="mb-4 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600"
+        >
+          ‚ûï Aggiungi spesa
+        </button>
+
+        {showForm && (
+          <form onSubmit={handleSubmit} className="bg-white dark:bg-gray-800 p-4 rounded shadow mb-4 space-y-2">
+            <select
+              className="w-full border px-2 py-1 rounded dark:bg-gray-700 dark:text-white"
+              value={formData.categoria}
+              onChange={(e) => setFormData({ ...formData, categoria: e.target.value })}
+            >
+              <option value="">Seleziona categoria</option>
+              {categories.map((cat) => (
+                <option key={cat.key} value={cat.key}>
+                  {cat.label}
+                </option>
+              ))}
+            </select>
+            <input
+              type="date"
+              className="w-full border px-2 py-1 rounded dark:bg-gray-700 dark:text-white"
+              value={formData.data}
+              onChange={(e) => setFormData({ ...formData, data: e.target.value })}
+            />
+            <input
+              type="text"
+              placeholder="Esercente"
+              className="w-full border px-2 py-1 rounded dark:bg-gray-700 dark:text-white"
+              value={formData.esercente}
+              onChange={(e) => setFormData({ ...formData, esercente: e.target.value })}
+            />
+            <input
+              type="number"
+              step="0.01"
+              placeholder="Importo (‚Ç¨)"
+              className="w-full border px-2 py-1 rounded dark:bg-gray-700 dark:text-white"
+              value={formData.importo}
+              onChange={(e) => setFormData({ ...formData, importo: e.target.value })}
+            />
+            <div className="flex justify-end space-x-2">
+              <button
+                type="button"
+                onClick={() => setShowForm(false)}
+                className="px-3 py-1 rounded bg-gray-300 hover:bg-gray-400"
+              >
+                Annulla
+              </button>
+              <button
+                type="submit"
+                className="px-3 py-1 rounded bg-blue-500 text-white hover:bg-blue-600"
+              >
+                Salva
+              </button>
+            </div>
+          </form>
+        )}
+
+        {activeCategory && (
+          <table className="w-full bg-white dark:bg-gray-800 rounded shadow overflow-hidden">
+            <thead className="bg-gray-200 dark:bg-gray-700">
+              <tr>
+                <th className="px-2 py-1 text-left">Data</th>
+                <th className="px-2 py-1 text-left">Esercente</th>
+                <th className="px-2 py-1 text-right">Importo (‚Ç¨)</th>
+                <th className="px-2 py-1 text-center">Azioni</th>
+              </tr>
+            </thead>
+            <tbody>
+              {spese.map((s) => (
+                <tr key={s.id} className="border-t">
+                  <td className="px-2 py-1">{s.data}</td>
+                  <td className="px-2 py-1">{s.esercente}</td>
+                  <td className="px-2 py-1 text-right">{s.importo.toFixed(2)}</td>
+                  <td className="px-2 py-1 text-center space-x-2">
+                    <button onClick={() => handleEdit(s)} className="text-blue-600">‚úèÔ∏è</button>
+                    <button onClick={() => handleDelete(s.id)} className="text-red-600">‚ùå</button>
+                  </td>
+                </tr>
+              ))}
+            </tbody>
+          </table>
+        )}
+      </main>
+    </div>
+  );
+}
diff --git a/pages/home.tsx b/pages/home.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..9c714d984ea6e94b5c325f01754c32cea0f3a81c
--- /dev/null
+++ b/pages/home.tsx
@@ -0,0 +1,72 @@
+import { useEffect, useState } from 'react';
+import Link from 'next/link';
+import { useRouter } from 'next/router';
+import { supabase } from '../utils/supabaseClient';
+import Navbar from '../components/Navbar';
+
+export default function HomePage() {
+  const router = useRouter();
+  const [userEmail, setUserEmail] = useState<string | null>(null);
+  const [loading, setLoading] = useState(true);
+
+  useEffect(() => {
+    const checkUser = async () => {
+      const {
+        data: { session },
+      } = await supabase.auth.getSession();
+      if (!session?.user) {
+        router.replace('/');
+      } else {
+        setUserEmail(session.user.email);
+      }
+      setLoading(false);
+    };
+
+    checkUser();
+
+    const {
+      data: { subscription },
+    } = supabase.auth.onAuthStateChange((_event, session) => {
+      if (!session?.user) {
+        router.replace('/');
+      } else {
+        setUserEmail(session.user.email);
+      }
+    });
+    return () => {
+      subscription.unsubscribe();
+    };
+  }, [router]);
+
+  if (loading) return null;
+  if (!userEmail) return null;
+
+  return (
+    <div className="min-h-screen bg-gray-100 dark:bg-gray-900">
+      <Navbar userEmail={userEmail} />
+      <main className="flex flex-col items-center p-4">
+        <h2 className="text-2xl font-bold mb-6 dark:text-white">Benvenuto, {userEmail}</h2>
+        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 w-full max-w-md">
+          <Link
+            href="/finanze"
+            className="block bg-white dark:bg-gray-800 rounded shadow p-8 text-center text-xl hover:bg-gray-50 dark:hover:bg-gray-700"
+          >
+            üí∞ Finanze
+          </Link>
+          <Link
+            href="/spese"
+            className="block bg-white dark:bg-gray-800 rounded shadow p-8 text-center text-xl hover:bg-gray-50 dark:hover:bg-gray-700"
+          >
+            üõí Spese
+          </Link>
+          <Link
+            href="/dashboard"
+            className="block bg-white dark:bg-gray-800 rounded shadow p-8 text-center text-xl hover:bg-gray-50 dark:hover:bg-gray-700"
+          >
+            üìä Dashboard
+          </Link>
+        </div>
+      </main>
+    </div>
+  );
+}
diff --git a/pages/index.tsx b/pages/index.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..1aa985d09227d8e6bd7313aa24fd28e190be8f94
--- /dev/null
+++ b/pages/index.tsx
@@ -0,0 +1,46 @@
+import { useState } from 'react';
+import { useRouter } from 'next/router';
+import { supabase } from '../utils/supabaseClient';
+
+export default function Home() {
+  const router = useRouter();
+  const [email, setEmail] = useState('');
+  const [password, setPassword] = useState('');
+  const [message, setMessage] = useState('');
+
+  const handleSubmit = async (e: React.FormEvent) => {
+    e.preventDefault();
+    const { error } = await supabase.auth.signInWithPassword({ email, password });
+    if (error) {
+      setMessage(error.message);
+    } else {
+      router.push('/home');
+    }
+  };
+
+  return (
+    <div className="flex items-center justify-center min-h-screen bg-gray-100 dark:bg-gray-900">
+      <form onSubmit={handleSubmit} className="bg-white dark:bg-gray-800 p-6 rounded shadow w-80 space-y-4">
+        <h1 className="text-xl font-bold text-center dark:text-white">Login</h1>
+        <input
+          type="email"
+          placeholder="Email"
+          value={email}
+          onChange={(e) => setEmail(e.target.value)}
+          className="w-full border px-3 py-2 rounded dark:bg-gray-700 dark:text-white"
+        />
+        <input
+          type="password"
+          placeholder="Password"
+          value={password}
+          onChange={(e) => setPassword(e.target.value)}
+          className="w-full border px-3 py-2 rounded dark:bg-gray-700 dark:text-white"
+        />
+        <button type="submit" className="w-full bg-blue-500 text-white py-2 rounded">
+          Sign In
+        </button>
+        {message && <p className="text-center text-sm text-red-500">{message}</p>}
+      </form>
+    </div>
+  );
+}
diff --git a/pages/profilo.tsx b/pages/profilo.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..bbd03c5f3d1922539e0e3da9ff02418d2b565852
--- /dev/null
+++ b/pages/profilo.tsx
@@ -0,0 +1,97 @@
+import { useEffect, useState } from 'react';
+import { useRouter } from 'next/router';
+import Navbar from '../components/Navbar';
+import { supabase } from '../utils/supabaseClient';
+
+export default function ProfiloPage() {
+  const router = useRouter();
+  const [userEmail, setUserEmail] = useState<string | null>(null);
+  const [userId, setUserId] = useState<string | null>(null);
+  const [loading, setLoading] = useState(true);
+  const [nickname, setNickname] = useState('');
+  const [message, setMessage] = useState('');
+
+  const fetchNickname = async (uid: string) => {
+    const { data } = await supabase
+      .from('utenti')
+      .select('nickname')
+      .eq('id', uid)
+      .single();
+    setNickname(data?.nickname || '');
+  };
+
+  useEffect(() => {
+    const checkUser = async () => {
+      const { data: { session } } = await supabase.auth.getSession();
+      if (!session?.user) {
+        router.replace('/');
+      } else {
+        setUserEmail(session.user.email);
+        setUserId(session.user.id);
+        fetchNickname(session.user.id);
+      }
+      setLoading(false);
+    };
+
+    checkUser();
+
+    const { data: { subscription } } = supabase.auth.onAuthStateChange((_event, session) => {
+      if (!session?.user) {
+        router.replace('/');
+      } else {
+        setUserEmail(session.user.email);
+        setUserId(session.user.id);
+        fetchNickname(session.user.id);
+      }
+    });
+
+    return () => subscription.unsubscribe();
+  }, [router]);
+
+  const handleSave = async (e: React.FormEvent) => {
+    e.preventDefault();
+    if (!userId) return;
+    const { error } = await supabase
+      .from('utenti')
+      .upsert({ id: userId, nickname });
+    if (error) setMessage('Errore nel salvataggio');
+    else setMessage('Nickname salvato');
+  };
+
+  const handleResetPassword = async () => {
+    if (!userEmail) return;
+    const { error } = await supabase.auth.resetPasswordForEmail(userEmail);
+    if (error) setMessage(error.message);
+    else setMessage('Email di reset inviata');
+  };
+
+  if (loading || !userEmail) return null;
+
+  return (
+    <div className="min-h-screen bg-gray-100 dark:bg-gray-900">
+      <Navbar userEmail={userEmail} />
+      <main className="p-4 max-w-md mx-auto space-y-4">
+        <h1 className="text-2xl font-bold dark:text-white">Profilo</h1>
+        <p className="dark:text-white">Email: {userEmail}</p>
+        <form onSubmit={handleSave} className="bg-white dark:bg-gray-800 p-4 rounded shadow space-y-2">
+          <label className="block text-sm font-semibold">Nickname</label>
+          <input
+            type="text"
+            className="w-full border px-2 py-1 rounded dark:bg-gray-700 dark:text-white"
+            value={nickname}
+            onChange={(e) => setNickname(e.target.value)}
+          />
+          <div className="flex justify-end">
+            <button type="submit" className="px-3 py-1 bg-blue-500 text-white rounded">
+              Salva
+            </button>
+          </div>
+        </form>
+        <button onClick={handleResetPassword} className="px-3 py-1 bg-green-500 text-white rounded">
+          Reset Password
+        </button>
+        {message && <p className="text-center text-sm dark:text-white">{message}</p>}
+      </main>
+    </div>
+  );
+}
diff --git a/pages/spese.tsx b/pages/spese.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..1f103fd21bf716cf2fa147066315995fe6b17c06
--- /dev/null
+++ b/pages/spese.tsx
@@ -0,0 +1,391 @@
+import { useEffect, useState } from 'react';
+import { useRouter } from 'next/router';
+import SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';
+import Navbar from '../components/Navbar';
+import { supabase } from '../utils/supabaseClient';
+import { calcolaScorte } from '../utils/scorte';
+import { fetchOffers } from '../utils/operatorAPI';
+
+interface Item {
+  id: number;
+  prodotto: string;
+  data_acquisto?: string | null;
+  scadenza?: string | null;
+}
+
+interface StockItem {
+  id: number;
+  nome: string;
+  quantita?: number | null;
+  scadenza?: string | null;
+  data_acquisto?: string | null;
+  consumo?: number;
+  tempo?: number;
+}
+
+export default function SpesePage() {
+  const router = useRouter();
+  const [userEmail, setUserEmail] = useState<string | null>(null);
+  const [userId, setUserId] = useState<string | null>(null);
+  const [loading, setLoading] = useState(true);
+  const [listaSuper, setListaSuper] = useState<Item[]>([]);
+  const [listaOnline, setListaOnline] = useState<Item[]>([]);
+  const [prodottiEsaurimento, setProdottiEsaurimento] = useState<StockItem[]>([]);
+  const [newSuper, setNewSuper] = useState('');
+  const [newOnline, setNewOnline] = useState('');
+  const [voiceTarget, setVoiceTarget] = useState<'super' | 'online' | null>(null);
+  const { transcript, listening, resetTranscript } = useSpeechRecognition();
+  const [voiceOnly, setVoiceOnly] = useState(false);
+  const [offers, setOffers] = useState<Record<string, string[]>>({});
+  const [weeklyReport, setWeeklyReport] = useState<Record<string, string[]> | null>(null);
+
+  useEffect(() => {
+    const checkUser = async () => {
+      const { data: { session } } = await supabase.auth.getSession();
+      if (!session?.user) {
+        router.replace('/');
+      } else {
+        setUserEmail(session.user.email);
+        setUserId(session.user.id);
+        fetchLists(session.user.id);
+        fetchStock(session.user.id);
+      }
+      setLoading(false);
+    };
+
+    checkUser();
+
+    const { data: { subscription } } = supabase.auth.onAuthStateChange((_event, session) => {
+      if (!session?.user) {
+        router.replace('/');
+      } else {
+        setUserEmail(session.user.email);
+        setUserId(session.user.id);
+      }
+    });
+    return () => subscription.unsubscribe();
+  }, [router]);
+
+  const fetchLists = async (uid: string) => {
+    const { data: dataSuper } = await supabase
+      .from('lista_spesa_super')
+      .select('*')
+      .eq('user_id', uid)
+      .order('id');
+    setListaSuper((dataSuper as Item[]) || []);
+
+    const { data: dataOnline } = await supabase
+      .from('lista_spesa_online')
+      .select('*')
+      .eq('user_id', uid)
+      .order('id');
+    const listOnline = (dataOnline as Item[]) || [];
+    setListaOnline(listOnline);
+    if (listOnline.length) updateOffers(listOnline.map((i) => i.prodotto));
+  };
+
+  const fetchStock = async (uid: string) => {
+    const { data } = await supabase.from('stock').select('*').eq('user_id', uid);
+    if (data) {
+      const now = new Date();
+      const result = (data as StockItem[]).map((p) => {
+        if (p.data_acquisto && p.scadenza && p.quantita) {
+          const { consumoStimato, tempoRimanente } = calcolaScorte(
+            new Date(p.data_acquisto),
+            p.quantita,
+            new Date(p.scadenza),
+            now
+          );
+          return { ...p, consumo: consumoStimato, tempo: tempoRimanente };
+        }
+        return p;
+      }).filter(
+        (p) =>
+          (p.consumo !== undefined && p.consumo > 80) ||
+          (p.tempo !== undefined && p.tempo < 10)
+      );
+      setProdottiEsaurimento(result);
+    }
+  };
+
+  const updateOffers = async (products: string[]) => {
+    try {
+      const data = await fetchOffers(products);
+      setOffers(data);
+      setWeeklyReport(data);
+    } catch (err) {
+      console.error('operator request failed');
+    }
+  };
+
+  const addProduct = async (target: 'super' | 'online', name: string) => {
+    const table = target === 'super' ? 'lista_spesa_super' : 'lista_spesa_online';
+    if (!name.trim()) return;
+    if (!userId) return;
+    await supabase.from(table).insert({ prodotto: name.trim(), user_id: userId });
+    if (target === 'super') {
+      setNewSuper('');
+    } else {
+      setNewOnline('');
+    }
+    if (userId) fetchLists(userId);
+  };
+
+  const removeProduct = async (target: 'super' | 'online', id: number) => {
+    const table = target === 'super' ? 'lista_spesa_super' : 'lista_spesa_online';
+    await supabase.from(table).delete().eq('id', id);
+    if (userId) fetchLists(userId);
+  };
+
+  const startVoice = (target: 'super' | 'online') => {
+    resetTranscript();
+    setVoiceTarget(target);
+    SpeechRecognition.startListening({ continuous: false, language: 'it-IT' });
+  };
+
+  const stopVoice = () => {
+    SpeechRecognition.stopListening();
+  };
+
+  const confirmVoice = async () => {
+    stopVoice();
+    const items = transcript
+      .split(',')
+      .map((p) => p.trim())
+      .filter((p) => p);
+    for (const name of items) {
+      await addProduct(voiceTarget as 'super' | 'online', name);
+    }
+    setVoiceTarget(null);
+    resetTranscript();
+  };
+
+  const addAgain = async (name: string, target: 'super' | 'online') => {
+    await addProduct(target, name);
+  };
+
+  const downloadTxt = () => {
+    const lines: string[] = [];
+    if (listaSuper.length) {
+      lines.push('Lista Supermercato:');
+      listaSuper.forEach((i) => lines.push(`- ${i.prodotto}`));
+    }
+    if (listaOnline.length) {
+      if (lines.length) lines.push('');
+      lines.push('Lista Spesa Online:');
+      listaOnline.forEach((i) => lines.push(`- ${i.prodotto}`));
+    }
+    if (!lines.length) return;
+    const blob = new Blob([lines.join('\n')], { type: 'text/plain' });
+    const url = URL.createObjectURL(blob);
+    const link = document.createElement('a');
+    link.href = url;
+    link.download = 'lista_spesa.txt';
+    link.click();
+    URL.revokeObjectURL(url);
+  };
+
+  if (loading) return null;
+  if (!userEmail) return null;
+
+  return (
+    <div className="min-h-screen bg-gray-100 dark:bg-gray-900">
+      <Navbar userEmail={userEmail} />
+      <main className="p-4 max-w-4xl mx-auto grid gap-6">
+        <div className="flex items-center mb-4">
+          <label className="flex items-center space-x-2">
+            <input
+              type="checkbox"
+              className="form-checkbox h-4 w-4"
+              checked={voiceOnly}
+              onChange={(e) => setVoiceOnly(e.target.checked)}
+            />
+            <span>üé§ Modalit√† Solo Vocale</span>
+          </label>
+        </div>
+        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
+          {/* Lista Supermercato */}
+          <div className="bg-white dark:bg-gray-800 rounded shadow p-4">
+            <h2 className="text-xl font-bold mb-2 dark:text-white">üõí Lista Supermercato</h2>
+            <ul className="space-y-1 mb-2">
+              {listaSuper.map((item) => (
+                <li key={item.id} className="flex justify-between items-center border-b py-1">
+                  <span>{item.prodotto}</span>
+                  <button
+                    onClick={() => removeProduct('super', item.id)}
+                    className="text-red-600"
+                  >
+                    ‚ùå
+                  </button>
+                </li>
+              ))}
+            </ul>
+            <div className="flex space-x-2 mb-2">
+              {!voiceOnly && (
+                <>
+                  <input
+                    type="text"
+                    className="flex-grow border px-2 py-1 rounded dark:bg-gray-700 dark:text-white"
+                    value={newSuper}
+                    onChange={(e) => setNewSuper(e.target.value)}
+                    placeholder="Nuovo prodotto"
+                  />
+                  <button
+                    onClick={() => addProduct('super', newSuper)}
+                    className="px-3 py-1 bg-green-500 text-white rounded"
+                  >
+                    ‚ûï
+                  </button>
+                </>
+              )}
+              <button
+                onClick={() => startVoice('super')}
+                className="px-3 py-1 bg-blue-500 text-white rounded"
+              >
+                üé§
+              </button>
+            </div>
+          </div>
+
+          {/* Lista Spesa Online */}
+          <div className="bg-white dark:bg-gray-800 rounded shadow p-4">
+            <h2 className="text-xl font-bold mb-2 dark:text-white">üíª Lista Spesa Online</h2>
+            <ul className="space-y-1 mb-2">
+              {listaOnline.map((item) => (
+                <li key={item.id} className="border-b py-1">
+                  <div className="flex justify-between items-center">
+                    <span>{item.prodotto}</span>
+                    <button
+                      onClick={() => removeProduct('online', item.id)}
+                      className="text-red-600"
+                    >
+                      ‚ùå
+                    </button>
+                  </div>
+                  {offers[item.prodotto] && (
+                    <div className="ml-2 text-sm text-blue-600 dark:text-blue-400 flex flex-col">
+                      {offers[item.prodotto].slice(0, 3).map((link: string, idx: number) => (
+                        <a key={idx} href={link} target="_blank" className="underline">
+                          Offerta {idx + 1}
+                        </a>
+                      ))}
+                    </div>
+                  )}
+                </li>
+              ))}
+            </ul>
+            <div className="flex space-x-2 mb-2">
+              {!voiceOnly && (
+                <>
+                  <input
+                    type="text"
+                    className="flex-grow border px-2 py-1 rounded dark:bg-gray-700 dark:text-white"
+                    value={newOnline}
+                    onChange={(e) => setNewOnline(e.target.value)}
+                    placeholder="Nuovo prodotto"
+                  />
+                  <button
+                    onClick={() => addProduct('online', newOnline)}
+                    className="px-3 py-1 bg-green-500 text-white rounded"
+                  >
+                    ‚ûï
+                  </button>
+                </>
+              )}
+              <button
+                onClick={() => startVoice('online')}
+                className="px-3 py-1 bg-blue-500 text-white rounded"
+              >
+                üé§
+              </button>
+            </div>
+        </div>
+      </div>
+
+        <div className="flex justify-end">
+          <button
+            onClick={downloadTxt}
+            className="px-3 py-1 bg-purple-500 text-white rounded"
+          >
+            ‚¨áÔ∏è Scarica lista
+          </button>
+        </div>
+
+        {/* Voice Input Panel */}
+        {voiceTarget && (
+          <div className="bg-white dark:bg-gray-800 rounded shadow p-4 space-y-2">
+            <p className="font-semibold">Dettatura in corso...</p>
+            <textarea
+              className="w-full border p-2 rounded dark:bg-gray-700 dark:text-white"
+              value={transcript}
+              readOnly
+            />
+            <div className="flex space-x-2">
+              {!voiceOnly && (
+                <button onClick={stopVoice} className="px-3 py-1 bg-gray-300 dark:bg-gray-600 rounded">
+                  Stop
+                </button>
+              )}
+              <button onClick={confirmVoice} className="px-3 py-1 bg-blue-500 text-white rounded">
+                Conferma elenco
+              </button>
+            </div>
+          </div>
+        )}
+
+        {/* Prodotti in esaurimento */}
+        {prodottiEsaurimento.length > 0 && (
+          <div className="bg-white dark:bg-gray-800 rounded shadow p-4">
+            <h2 className="text-xl font-bold mb-2 dark:text-white">üì¶ Prodotti in esaurimento o in scadenza</h2>
+            <ul className="space-y-1 dark:text-white">
+              {prodottiEsaurimento.map((p) => (
+                <li
+                  key={p.id}
+                  className={`flex justify-between items-center border-b py-1 ${
+                    p.consumo && p.consumo > 80 ? 'text-orange-600' : ''
+                  } ${p.tempo && p.tempo < 10 ? 'text-red-600' : ''}`}
+                >
+                  <span>{p.nome}</span>
+                  <div className="space-x-2">
+                    <button
+                      onClick={() => addAgain(p.nome, 'super')}
+                      className="px-2 py-1 bg-green-500 text-white rounded text-sm"
+                    >
+                      Aggiungi al Super
+                    </button>
+                    <button
+                      onClick={() => addAgain(p.nome, 'online')}
+                      className="px-2 py-1 bg-blue-500 text-white rounded text-sm"
+                    >
+                      Aggiungi Online
+                    </button>
+                  </div>
+                </li>
+              ))}
+            </ul>
+          </div>
+        )}
+
+        {weeklyReport && (
+          <div className="bg-white dark:bg-gray-800 rounded shadow p-4">
+            <h2 className="text-xl font-bold mb-2 dark:text-white">üì∞ Offerte settimanali</h2>
+            {Object.entries(weeklyReport).map(([prod, links]) => (
+              <div key={prod} className="mb-2">
+                <p className="font-semibold dark:text-white">{prod}</p>
+                <ul className="list-disc list-inside text-blue-600 dark:text-blue-400">
+                  {links.slice(0, 3).map((l, i) => (
+                    <li key={i}>
+                      <a href={l} target="_blank" className="underline">
+                        Offerta {i + 1}
+                      </a>
+                    </li>
+                  ))}
+                </ul>
+              </div>
+            ))}
+          </div>
+        )}
+      </main>
+    </div>
+  );
+}
diff --git a/prisma/schema.prisma b/prisma/schema.prisma
deleted file mode 100644
index 99dc6a64b865d993811c9baa43355260d065a30f..0000000000000000000000000000000000000000
--- a/prisma/schema.prisma
+++ /dev/null
@@ -1,43 +0,0 @@
-generator client { provider = "prisma-client-js" }
-datasource db      { provider = "postgresql" url = env("DATABASE_URL") }
-
-model User {
-  id        String   @id @default(cuid())
-  email     String   @unique
-  password  String
-  expenses  Expense[]
-  lists     ShoppingList[]
-  incomes   Income[]
-}
-
-model Expense {
-  id        String   @id @default(cuid())
-  user      User     @relation(fields: [userId], references: [id])
-  userId    String
-  category  Category @default(VARIE)
-  merchant  String?
-  amount    Decimal  @db.Money
-  date      DateTime
-  createdAt DateTime @default(now())
-}
-
-model Income {
-  id        String   @id @default(cuid())
-  user      User     @relation(fields: [userId], references: [id])
-  userId    String
-  source    String
-  amount    Decimal  @db.Money
-  date      DateTime
-}
-
-model ShoppingList {
-  id        String   @id @default(cuid())
-  type      ListType
-  user      User     @relation(fields: [userId], references: [id])
-  userId    String
-  items     Json     // [{name, qty, checked, expires}]
-  updatedAt DateTime @updatedAt
-}
-
-enum Category   { CASA VESTITI DIVERTIMENTO VARIE }
-enum ListType   { SUPERMARKET ONLINE }
diff --git a/src/app/api/auth/route.ts b/src/app/api/auth/route.ts
deleted file mode 100644
index 20c888d26a05c3bb42ccdea39f8096da65d3d074..0000000000000000000000000000000000000000
--- a/src/app/api/auth/route.ts
+++ /dev/null
@@ -1,33 +0,0 @@
-import NextAuth, { type NextAuthConfig } from "next-auth";
-import { SupabaseAdapter } from "@next-auth/supabase-adapter";
-import { createClient } from "@supabase/supabase-js";
-import GitHubProvider from "next-auth/providers/github";
-
-// Inizializza un client Supabase lato server (necessario per l'adapter)
-const supabase = createClient(
-  process.env.NEXT_PUBLIC_SUPABASE_URL as string,
-  process.env.SUPABASE_SERVICE_ROLE_KEY as string
-);
-
-export const authConfig: NextAuthConfig = {
-  // Provider di esempio (GitHub). Aggiungine/ sostituisci secondo necessit√†.
-  providers: [
-    GitHubProvider({
-      clientId: process.env.GITHUB_CLIENT_ID as string,
-      clientSecret: process.env.GITHUB_CLIENT_SECRET as string,
-    }),
-  ],
-  adapter: SupabaseAdapter({
-    url: process.env.NEXT_PUBLIC_SUPABASE_URL as string,
-    secret: process.env.SUPABASE_SERVICE_ROLE_KEY as string,
-  }),
-  secret: process.env.NEXTAUTH_SECRET,
-  session: {
-    strategy: "jwt",
-  },
-  pages: {
-    signIn: "/login",
-  },
-};
-
-export const { GET, POST } = NextAuth(authConfig);
diff --git a/src/app/finanze/page.tsx b/src/app/finanze/page.tsx
deleted file mode 100644
index b473f3a9e6fdcf95755d5fcdacb5af6092339353..0000000000000000000000000000000000000000
--- a/src/app/finanze/page.tsx
+++ /dev/null
@@ -1,9 +0,0 @@
-export default function FinanzePage() {
-  return (
-    <main className="p-6">
-      <h1 className="text-2xl font-bold">Finanze</h1>
-      <p className="mt-4 text-gray-600">Sezione finanze (dashboard in costruzione).</p>
-    </main>
-  );
-}
-
diff --git a/src/app/layout.tsx b/src/app/layout.tsx
deleted file mode 100644
index cef7a2d73287b897cdf5736c7b8852eb7c460196..0000000000000000000000000000000000000000
--- a/src/app/layout.tsx
+++ /dev/null
@@ -1,30 +0,0 @@
-import "./globals.css";
-import type { Metadata } from "next";
-
-export const metadata: Metadata = {
-  title: "Jarvis Assistant",
-  description: "Gestione finanze personali e liste spesa",
-};
-
-export default function RootLayout({
-  children,
-}: {
-  children: React.ReactNode;
-}) {
-     return (
-      <html lang="it">
-        <body className="flex">
-          <nav className="w-48 min-h-screen bg-gray-100 p-4 space-y-2">
-            <a href="/" className="block font-semibold">Home</a>
-            <a href="/finanze" className="block">Finanze</a>
-            <a href="/spese" className="block">Spese</a>
-            <a href="/liste-spesa" className="block">Liste Spesa</a>
-            <a href="/stock" className="block">Stock</a>
-          </nav>
-          <main className="flex-1">{children}</main>
-        </body>
-      </html>
-    );ren}</body>
-    </html>
-  );
-}
diff --git a/src/app/liste-spesa/page.tsx b/src/app/liste-spesa/page.tsx
deleted file mode 100644
index 1752d9e2fc249b1a934ea3d70ad39a8d8dd3b206..0000000000000000000000000000000000000000
--- a/src/app/liste-spesa/page.tsx
+++ /dev/null
@@ -1,8 +0,0 @@
-export default function ListeSpesaPage() {
-  return (
-    <main className="p-6">
-      <h1 className="text-2xl font-bold">Liste Spesa</h1>
-      <p className="mt-4 text-gray-600">Liste spesa fisica / online (work in progress).</p>
-    </main>
-  );
-}
diff --git a/src/app/login/page.tsx b/src/app/login/page.tsx
deleted file mode 100644
index 01a5f0878e66ed33ce5c2968af1192bc587e77fe..0000000000000000000000000000000000000000
--- a/src/app/login/page.tsx
+++ /dev/null
@@ -1,18 +0,0 @@
-import { getServerSession } from "next-auth";
-import { redirect } from "next/navigation";
-
-export default async function LoginPage() {
-  const session = await getServerSession();
-  if (session) redirect("/");
-
-  return (
-    <div className="flex min-h-screen items-center justify-center">
-      <a
-        href="/api/auth/signin/github"
-        className="rounded bg-black px-4 py-2 text-white"
-      >
-        Sign in with GitHub
-      </a>
-    </div>
-  );
-}
diff --git a/src/app/page.tsx b/src/app/page.tsx
deleted file mode 100644
index 5cd5acdba29c9b3e6c12e6ce4d49451786f61b76..0000000000000000000000000000000000000000
--- a/src/app/page.tsx
+++ /dev/null
@@ -1,8 +0,0 @@
-export default function Page() {
-  return (
-    <main style={{ padding: '2rem', fontFamily: 'sans-serif' }}>
-      <h1>Jarvis Assistant</h1>
-      <p>Setup in progress...</p>
-    </main>
-  );
-}
diff --git a/src/app/spese/page.tsx b/src/app/spese/page.tsx
deleted file mode 100644
index dd13e15d448fb14f6f08a045d4094cf858d13115..0000000000000000000000000000000000000000
--- a/src/app/spese/page.tsx
+++ /dev/null
@@ -1,8 +0,0 @@
-export default function SpesePage() {
-  return (
-    <main className="p-6">
-      <h1 className="text-2xl font-bold">Spese</h1>
-      <p className="mt-4 text-gray-600">Gestione spese (CRUD in costruzione).</p>
-    </main>
-  );
-}
diff --git a/src/app/stock/page.tsx b/src/app/stock/page.tsx
deleted file mode 100644
index 3c0b089e0eb6c965132003c690d4d33b04136a11..0000000000000000000000000000000000000000
--- a/src/app/stock/page.tsx
+++ /dev/null
@@ -1,8 +0,0 @@
-export default function StockPage() {
-  return (
-    <main className="p-6">
-      <h1 className="text-2xl font-bold">Stock</h1>
-      <p className="mt-4 text-gray-600">Gestione magazzino / esaurimenti (work in progress).</p>
-    </main>
-  );
-}
diff --git a/src/app/globals.css b/styles/globals.css
similarity index 66%
rename from src/app/globals.css
rename to styles/globals.css
index fa9bd8963dbd23db6932e272292f1d2062ea6ec3..b5c61c956711f981a41e95f7fcf0038436cfbb22 100644
--- a/src/app/globals.css
+++ b/styles/globals.css
@@ -1,7 +1,3 @@
 @tailwind base;
 @tailwind components;
 @tailwind utilities;
-
-body {
-  @apply font-sans;
-}
diff --git a/tailwind.config.js b/tailwind.config.js
new file mode 100644
index 0000000000000000000000000000000000000000..cee029c2116f1b30b044e19751779687c275add9
--- /dev/null
+++ b/tailwind.config.js
@@ -0,0 +1,12 @@
+/** @type {import('tailwindcss').Config} */
+module.exports = {
+  darkMode: 'class',
+  content: [
+    "./pages/**/*.{js,ts,jsx,tsx}",
+    "./components/**/*.{js,ts,jsx,tsx}",
+  ],
+  theme: {
+    extend: {},
+  },
+  plugins: [],
+};
diff --git a/tailwind.config.ts b/tailwind.config.ts
deleted file mode 100644
index 46da381a029b445e1b32ca022e3728e44a3a9cb3..0000000000000000000000000000000000000000
--- a/tailwind.config.ts
+++ /dev/null
@@ -1,11 +0,0 @@
-import type { Config } from 'tailwindcss';
-
-const config: Config = {
-  content: ['./src/**/*.{js,ts,jsx,tsx}'],
-  theme: {
-    extend: {},
-  },
-  plugins: [],
-};
-
-export default config;
diff --git a/tsconfig.json b/tsconfig.json
index 8bd57e86c1682515854ae4641d9d4c535549aa62..22861ca413061cad60d49d6f1b20c207b3ea7910 100644
--- a/tsconfig.json
+++ b/tsconfig.json
@@ -1,22 +1,21 @@
 {
   "compilerOptions": {
     "target": "es5",
     "lib": ["dom", "dom.iterable", "esnext"],
     "allowJs": true,
     "skipLibCheck": true,
     "esModuleInterop": true,
     "allowSyntheticDefaultImports": true,
     "strict": false,
     "forceConsistentCasingInFileNames": true,
     "noEmit": true,
     "module": "esnext",
     "moduleResolution": "node",
     "resolveJsonModule": true,
     "isolatedModules": true,
     "jsx": "preserve",
-    "incremental": true,
-    "types": ["n, "next-auth"ode"]
+    "incremental": true
   },
   "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx"],
   "exclude": ["node_modules"]
 }
diff --git a/utils/gptCategorizer.ts b/utils/gptCategorizer.ts
new file mode 100644
index 0000000000000000000000000000000000000000..d2e4ecd12a8324223b7930f9f21a00a6726fceb5
--- /dev/null
+++ b/utils/gptCategorizer.ts
@@ -0,0 +1,18 @@
+import OpenAI from 'openai';
+
+const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
+
+export async function getCategoria(spesa: string): Promise<string> {
+  const prompt = `Classifica la spesa '${spesa}' come: Casa, Vestiti, Divertimento o Varie. Rispondi solo con una di queste parole.`;
+  const res = await openai.chat.completions.create({
+    model: 'gpt-3.5-turbo',
+    messages: [{ role: 'user', content: prompt }],
+    max_tokens: 10,
+  });
+  const text = res.choices[0].message?.content?.trim().toLowerCase();
+  if (!text) return 'varie';
+  if (text.includes('casa')) return 'casa';
+  if (text.includes('vestiti')) return 'vestiti';
+  if (text.includes('divertimento')) return 'divertimento';
+  return 'varie';
+}
diff --git a/utils/operatorAPI.ts b/utils/operatorAPI.ts
new file mode 100644
index 0000000000000000000000000000000000000000..c6d39db80b28580899afd8332904baa71219fc6c
--- /dev/null
+++ b/utils/operatorAPI.ts
@@ -0,0 +1,11 @@
+export async function fetchOffers(products: string[]) {
+  const res = await fetch('https://operator.chatgpt.com', {
+    method: 'POST',
+    headers: { 'Content-Type': 'application/json' },
+    body: JSON.stringify({ products }),
+  });
+  if (!res.ok) {
+    throw new Error('Operator API request failed');
+  }
+  return res.json();
+}
diff --git a/utils/scorte.ts b/utils/scorte.ts
new file mode 100644
index 0000000000000000000000000000000000000000..88645c4aaf69a6f9405544d821db5c184086a537
--- /dev/null
+++ b/utils/scorte.ts
@@ -0,0 +1,23 @@
+export interface ScorteResult {
+  consumoStimato: number;
+  tempoRimanente: number;
+}
+
+export function calcolaScorte(
+  data_acquisto: Date,
+  quantita: number,
+  scadenza: Date,
+  data_attuale: Date
+): ScorteResult {
+  const total = scadenza.getTime() - data_acquisto.getTime();
+  if (total <= 0) {
+    return { consumoStimato: 100, tempoRimanente: 0 };
+  }
+  const elapsed = data_attuale.getTime() - data_acquisto.getTime();
+  const consumo = Math.min(100, Math.max(0, (elapsed / total) * 100));
+  const remaining = Math.max(0, Math.min(100, (scadenza.getTime() - data_attuale.getTime()) / total * 100));
+  return {
+    consumoStimato: parseFloat(consumo.toFixed(2)),
+    tempoRimanente: parseFloat(remaining.toFixed(2)),
+  };
+}
diff --git a/utils/supabaseClient.ts b/utils/supabaseClient.ts
new file mode 100644
index 0000000000000000000000000000000000000000..b63fe8b0f717babb6785540a86ab8f3a6ed02f52
--- /dev/null
+++ b/utils/supabaseClient.ts
@@ -0,0 +1,10 @@
+import { createClient } from '@supabase/supabase-js';
+
+const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
+const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON;
+
+if (!supabaseUrl || !supabaseAnonKey) {
+  throw new Error('‚ùå Le variabili di ambiente Supabase mancano. Verifica il file .env.local');
+}
+
+export const supabase = createClient(supabaseUrl, supabaseAnonKey);
